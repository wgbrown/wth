{
	"name": "nb_DeltaLake_FromStage",
	"properties": {
		"nbformat": 4,
		"nbformat_minor": 2,
		"bigDataPool": {
			"referenceName": "wthspark",
			"type": "BigDataPoolReference"
		},
		"sessionProperties": {
			"driverMemory": "28g",
			"driverCores": 4,
			"executorMemory": "28g",
			"executorCores": 4,
			"numExecutors": 2,
			"conf": {
				"spark.dynamicAllocation.enabled": "false",
				"spark.dynamicAllocation.minExecutors": "2",
				"spark.dynamicAllocation.maxExecutors": "2",
				"spark.autotune.trackingId": "51f72ce5-1b6a-462d-b8c1-efbc9cd8905e"
			}
		},
		"metadata": {
			"saveOutput": true,
			"enableDebugMode": false,
			"kernelspec": {
				"name": "synapse_pyspark",
				"display_name": "Synapse PySpark"
			},
			"language_info": {
				"name": "python"
			},
			"a365ComputeOptions": {
				"id": "/subscriptions/fa1477dd-824c-44b2-aff7-1fa9d7f30154/resourceGroups/hack-a-thon-rg/providers/Microsoft.Synapse/workspaces/wth/bigDataPools/wthspark",
				"name": "wthspark",
				"type": "Spark",
				"endpoint": "https://wth.dev.azuresynapse.net/livyApi/versions/2019-11-01-preview/sparkPools/wthspark",
				"auth": {
					"type": "AAD",
					"authResource": "https://dev.azuresynapse.net"
				},
				"sparkVersion": "3.2",
				"nodeCount": 10,
				"cores": 4,
				"memory": 28,
				"automaticScaleJobs": false
			},
			"sessionKeepAliveTimeout": 30
		},
		"cells": [
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"outputs_hidden": false
					},
					"collapsed": false
				},
				"source": [
					"# Use the magic notation %%pyspark if default language is something other than PySpark....\r\n",
					"# Load a file into a dataframe\r\n",
					"# df = spark.read.load('/stage/mydata.csv', format='csv', header=True)\r\n",
					"bronze_root='abfss://bronze@whatthehackwgb.dfs.core.windows.net/advworks/' \r\n",
					"df = spark.read.load(bronze_root + 'Product/Product.parquet', format='parquet')\r\n",
					"display(df.limit(10))"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# Save the dataframe as a delta table\r\n",
					" \r\n",
					"delta_root = 'abfss://silver@whatthehackwgb.dfs.core.windows.net/advworks/'\r\n",
					"delta_table_path = delta_root + \"Product\"\r\n",
					""
				],
				"execution_count": 2
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"#delta_table_path\r\n",
					"df.write.format(\"delta\").save(delta_table_path)"
				],
				"execution_count": 3
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-development-using-notebooks\r\n",
					"# https://learn.microsoft.com/en-us/azure/synapse-analytics/spark/apache-spark-delta-lake-overview?pivots=programming-language-python\r\n",
					"\r\n",
					"# Read from Delta....\r\n",
					"df = spark.read.format(\"delta\").load(delta_table_path)\r\n",
					"df.show()"
				],
				"execution_count": 6
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# https://stackoverflow.com/questions/71043995/spark-sql-queries-against-delta-lake-tables-using-symlink-format-manifest#:~:text=In%20order%20to%20query%20the%20delta%20lake%20table,query%20to%20the%20following%20format%3A%20delta.%60%3Ctable-path%3E%60%20For%20example%2C\r\n",
					"sql_query = \"select * from delta.`\" + delta_table_path + \"/`\"\r\n",
					"#sql_query\r\n",
					"spark.sql(sql_query)"
				],
				"execution_count": 5
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"deltaTable = DeltaTable.forPath(spark,delta_table_path) \r\n",
					"\r\n",
					"df_bronze = spark.read.load(bronze_root + 'Product/Product.parquet', format='parquet')\r\n",
					"\r\n",
					"\r\n",
					"deltaTable.alias(\"target\").merge(\r\n",
					"     source = df_bronze.alias(\"source\"),\r\n",
					"     condition = \"source.productid = target.productid\"\r\n",
					"    ).whenMatchedUpdate(\r\n",
					"    set = {\r\n",
					"    \"Name\":\"source.Name\",\r\n",
					"\t\"ProductNumber\" : \"source.ProductNumber\"\r\n",
					"    }\r\n",
					"    ).whenNotMatchedInsert( values = \r\n",
					"    {}\r\n",
					"    ).execute()\r\n",
					"\r\n",
					"\r\n",
					"deltaTable.toDF().show()"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"SELECT * FROM extProduct ;"
				],
				"execution_count": null
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"microsoft": {
						"language": "sparksql"
					},
					"collapsed": false
				},
				"source": [
					"%%sql\r\n",
					"DESCRIBE HISTORY extProduct "
				],
				"execution_count": 16
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": true
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"from delta.tables import *\r\n",
					"from pyspark.sql.functions import *\r\n",
					"\r\n",
					"# Instantiate a Delta Table\r\n",
					"delta_table = DeltaTable.forPath(spark, delta_table_path)\r\n",
					"\r\n",
					"# Show History\r\n",
					"delta_table.history().show(20, 1000, False)"
				],
				"execution_count": 8
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					},
					"collapsed": false
				},
				"source": [
					"# https://learn.microsoft.com/en-us/azure/databricks/sql/language-manual/delta-vacuum\r\n",
					"%%sql\r\n",
					"VACUUM extProduct RETAIN 12 HOURS DRY RUN;"
				],
				"execution_count": 9
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"df = spark.read.format(\"delta\").option(\"versionAsOf\", 0).load(delta_table_path)\r\n",
					"df.show()"
				],
				"execution_count": 4
			},
			{
				"cell_type": "code",
				"metadata": {
					"jupyter": {
						"source_hidden": false,
						"outputs_hidden": false
					},
					"nteract": {
						"transient": {
							"deleting": false
						}
					}
				},
				"source": [
					"# https://learn.microsoft.com/en-us/training/modules/use-delta-lake-azure-synapse-analytics/3-create-delta-tables\r\n",
					"# More about how to overwrite, insert, and conditionally update..."
				],
				"execution_count": null
			}
		]
	}
}